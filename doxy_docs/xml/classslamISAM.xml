<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="classslamISAM" kind="class" language="C++" prot="public">
    <compoundname>slamISAM</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classslamISAM_1a5ea2ef42008a40071357a9b2286565b1" prot="private" static="no" mutable="no">
        <type>ISAM2Params</type>
        <definition>ISAM2Params slamISAM::parameters</definition>
        <argsstring></argsstring>
        <name>parameters</name>
        <qualifiedname>slamISAM::parameters</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="59" column="22" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslamISAM_1ad40bdcfcafb135f52b3968a81744df0f" prot="private" static="no" mutable="no">
        <type>ISAM2</type>
        <definition>ISAM2 slamISAM::isam2</definition>
        <argsstring></argsstring>
        <name>isam2</name>
        <qualifiedname>slamISAM::isam2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="60" column="11" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslamISAM_1aaff5414a2a404c29811ae269b7c1769b" prot="private" static="no" mutable="no">
        <type>NonlinearFactorGraph</type>
        <definition>NonlinearFactorGraph slamISAM::graph</definition>
        <argsstring></argsstring>
        <name>graph</name>
        <qualifiedname>slamISAM::graph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="61" column="26" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslamISAM_1a8c3fd1e88200d8230bfc48b28404ccc1" prot="private" static="no" mutable="no">
        <type>Values</type>
        <definition>Values slamISAM::values</definition>
        <argsstring></argsstring>
        <name>values</name>
        <qualifiedname>slamISAM::values</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="62" column="12" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslamISAM_1aa1bbd820665ee45fa2d03804d61b92ba" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int slamISAM::pose_num</definition>
        <argsstring></argsstring>
        <name>pose_num</name>
        <qualifiedname>slamISAM::pose_num</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="64" column="9" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classslamISAM_1a9a7bf54fb68cd6ad39cf2be656f1da4c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int slamISAM::n_landmarks</definition>
        <argsstring></argsstring>
        <name>n_landmarks</name>
        <qualifiedname>slamISAM::n_landmarks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="77" column="9" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslamISAM_1a557bf4cb56eae4be97a60f5ce65c365a" prot="public" static="no" mutable="no">
        <type>gtsam::Pose2</type>
        <definition>gtsam::Pose2 slamISAM::robot_est</definition>
        <argsstring></argsstring>
        <name>robot_est</name>
        <qualifiedname>slamISAM::robot_est</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="77" column="34" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslamISAM_1a12db7db0ac15a3eeacba9330e922c9b7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; gtsam::Pose2 &gt;</type>
        <definition>std::vector&lt;gtsam::Pose2&gt; slamISAM::landmark_est</definition>
        <argsstring></argsstring>
        <name>landmark_est</name>
        <qualifiedname>slamISAM::landmark_est</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="78" column="17" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslamISAM_1a1f6520c125e1db548f1a088ace7a042e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; Point2 &gt;</type>
        <definition>std::vector&lt;Point2&gt; slamISAM::orange_cones</definition>
        <argsstring></argsstring>
        <name>orange_cones</name>
        <qualifiedname>slamISAM::orange_cones</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="79" column="17" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classslamISAM_1aec2ba37dcd63ad9e413e4c0f6d781065" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>gtsam::Symbol</type>
        <definition>gtsam::Symbol slamISAM::X</definition>
        <argsstring>(int robot_pose_id)</argsstring>
        <name>X</name>
        <qualifiedname>slamISAM::X</qualifiedname>
        <param>
          <type>int</type>
          <declname>robot_pose_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="67" column="19" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classslamISAM_1a9aa5e2c7ac1424c97711c9a5734282d9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>gtsam::Symbol</type>
        <definition>gtsam::Symbol slamISAM::L</definition>
        <argsstring>(int cone_pose_id)</argsstring>
        <name>L</name>
        <qualifiedname>slamISAM::L</qualifiedname>
        <param>
          <type>int</type>
          <declname>cone_pose_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="71" column="19" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="71" bodyend="73"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classslamISAM_1ad2830c6d162c4387d2296e47acdbc7eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>slamISAM::slamISAM</definition>
        <argsstring>()</argsstring>
        <name>slamISAM</name>
        <qualifiedname>slamISAM::slamISAM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="81" column="5" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="81" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classslamISAM_1a0a0a8309cd7ce17d5256b5e8435af151" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void slamISAM::print_cones</definition>
        <argsstring>(auto logger, std::vector&lt; Point2 &gt; &amp;cone_obs)</argsstring>
        <name>print_cones</name>
        <qualifiedname>slamISAM::print_cones</qualifiedname>
        <param>
          <type>auto</type>
          <declname>logger</declname>
        </param>
        <param>
          <type>std::vector&lt; Point2 &gt; &amp;</type>
          <declname>cone_obs</declname>
        </param>
        <briefdescription>
<para>print_cones will print the positions of the observed cones stored within the vector cone_obs. For DEBUGGING purposes </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cone_obs</parametername>
</parameternamelist>
<parameterdescription>
<para>is a memory address to the vector containing the Point2 positions of the observed cones<itemizedlist>
<listitem><para>you can just pass in the variable, but the type is std::vector&lt;Point2&gt; &amp; </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="109" column="10" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="109" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classslamISAM_1ab07c8f29237621e0b929d4a7098bfd4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void slamISAM::t_associate</definition>
        <argsstring>(vector&lt; Point2 &gt; *cone_obs, vector&lt; Pose2 &gt; *global_obs_cones, vector&lt; Pose2 &gt; *all_cone_est, Pose2 global_odom, vector&lt; float &gt; *m_dist, int lo, int hi)</argsstring>
        <name>t_associate</name>
        <qualifiedname>slamISAM::t_associate</qualifiedname>
        <param>
          <type>vector&lt; Point2 &gt; *</type>
          <declname>cone_obs</declname>
        </param>
        <param>
          <type>vector&lt; Pose2 &gt; *</type>
          <declname>global_obs_cones</declname>
        </param>
        <param>
          <type>vector&lt; Pose2 &gt; *</type>
          <declname>all_cone_est</declname>
        </param>
        <param>
          <type>Pose2</type>
          <declname>global_odom</declname>
        </param>
        <param>
          <type>vector&lt; float &gt; *</type>
          <declname>m_dist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
<para>t_associate is a function called by threads that will perform data association on the observed Point2 cones stored inside vector cone_obs. </para>
        </briefdescription>
        <detaileddescription>
<para>All calculated mahalanobis distances will be stored in vector m_dist. For a given time stamp, multiple threads will be spawned to calculate a subsection of the the mahalanobis distances from indices [lo, hi)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_obs_cones</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the global position for the Point2 cones observed in the current time stamp</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all_cone_est</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the estimates for the poses of previously seen cones, calculated by the iSAM2 model</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_odom</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pose2 variable representing the global pose of the car.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m_dist</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing all the mahalanobis distance calculations that will need to be calculated for the current time stamp.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Let n_landmarks represent the number of previously seen landmarks, m_dist is organized such that each set/multiple of n_landmarks + 1 elements corresponds to the mahalanobis distance between an observed cone and the global positions of all previously seen cones. The +1 represents the mahalanobis distance threshold (M_DIST_TH)</para>
<para>These mahalanobis distances will be used to perform data association on the observed landmarks, by observing which previously seen cone had the smallest mahalanobis distance from the current observed cone. If the smallest distance is M_DIST_TH, then the current observed cone is a new cone</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer representing the index in m_dist the current thread should start populating m_dist</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer representing the index in m_dist the current thread should stop populating m_dist. Does not calculate the element at index hi </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>calculate for how many previous cone estimates to calculate mahalanobis distance for, with respect to the current observation.</para>
<para>This is because the thread starts calculating mahalanobis distances starting at index lo, which may not be a multiple of n_landmarks + 1</para>
<para>(obs_id + 1): which multiple of (n_landmarks +1) depends on which observed cone</para>
<para>(n_landmarks + 1): n_landmarks for all previous landmarks and +1 for M_DIST_TH.</para>
<para>calculate difference between pose of current observed cone and previously seen cone</para>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="167" column="10" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="167" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classslamISAM_1a00e82e306602f32451124afb29364365" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void slamISAM::step</definition>
        <argsstring>(auto logger, gtsam::Pose2 global_odom, std::vector&lt; Point2 &gt; &amp;cone_obs, vector&lt; Point2 &gt; &amp;orange_ref_cones, gtsam::Point2 velocity, long time_ns, bool loopClosure)</argsstring>
        <name>step</name>
        <qualifiedname>slamISAM::step</qualifiedname>
        <param>
          <type>auto</type>
          <declname>logger</declname>
        </param>
        <param>
          <type>gtsam::Pose2</type>
          <declname>global_odom</declname>
        </param>
        <param>
          <type>std::vector&lt; Point2 &gt; &amp;</type>
          <declname>cone_obs</declname>
        </param>
        <param>
          <type>vector&lt; Point2 &gt; &amp;</type>
          <declname>orange_ref_cones</declname>
        </param>
        <param>
          <type>gtsam::Point2</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>long</type>
          <declname>time_ns</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>loopClosure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Use the previous pose estimate from iSAM2, and velocity odometry info to calculate the current pose</para>
<para>Using a velocity-based motion model</para>
<para>Spawn num_threads that will are responsible for performing data association on subset of the observed cones</para>
<para>Populate m_dist</para>
<para>Why are we obtaining all the estimates for the global position of previously seen cones sequentially instead of using threads?</para>
<para>a.) When using threads, we will have to calculate the estimate for the same previously seen cone multiple times, for each observed cone. (wasted computation)</para>
<para>b.) Issue with multiple threads calculating estimates at once. This is a critical section in the code. Therefore, it is safer to calculate all estimates in a vector, where multiple threads can safely read from the the vector (even if reading the same element)</para>
<para>Find min_dist; do this for each (n_landmarks + 1) sub-section of m_dist</para>
<para>Finding the previously seen cone that is the most similar to the current observed cone by finding the previously seen cone that had the smallest mahalanobis distance with the observed cone.</para>
<para>If the smallest mahalanobis distance is M_DIST_TH (the last element in each (n_landmarks + 1) subsection of m_dist), then the current landmark/cone is a new cone</para>
<para>Print to squirrel.txt Every single time you run step, you reprint the isam2 estimates Remove the previous estimates (trunc) RCLCPP_INFO(logger, &quot;graphing\n&quot;);</para>
        </inbodydescription>
        <location file="workspace/src/isam2/isam2.cpp" line="247" column="10" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="247" bodyend="504"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="workspace/src/isam2/isam2.cpp" line="58" column="1" bodyfile="workspace/src/isam2/isam2.cpp" bodystart="58" bodyend="505"/>
    <listofallmembers>
      <member refid="classslamISAM_1aaff5414a2a404c29811ae269b7c1769b" prot="private" virt="non-virtual"><scope>slamISAM</scope><name>graph</name></member>
      <member refid="classslamISAM_1ad40bdcfcafb135f52b3968a81744df0f" prot="private" virt="non-virtual"><scope>slamISAM</scope><name>isam2</name></member>
      <member refid="classslamISAM_1a9aa5e2c7ac1424c97711c9a5734282d9" prot="private" virt="non-virtual"><scope>slamISAM</scope><name>L</name></member>
      <member refid="classslamISAM_1a12db7db0ac15a3eeacba9330e922c9b7" prot="public" virt="non-virtual"><scope>slamISAM</scope><name>landmark_est</name></member>
      <member refid="classslamISAM_1a9a7bf54fb68cd6ad39cf2be656f1da4c" prot="public" virt="non-virtual"><scope>slamISAM</scope><name>n_landmarks</name></member>
      <member refid="classslamISAM_1a1f6520c125e1db548f1a088ace7a042e" prot="public" virt="non-virtual"><scope>slamISAM</scope><name>orange_cones</name></member>
      <member refid="classslamISAM_1a5ea2ef42008a40071357a9b2286565b1" prot="private" virt="non-virtual"><scope>slamISAM</scope><name>parameters</name></member>
      <member refid="classslamISAM_1aa1bbd820665ee45fa2d03804d61b92ba" prot="private" virt="non-virtual"><scope>slamISAM</scope><name>pose_num</name></member>
      <member refid="classslamISAM_1a0a0a8309cd7ce17d5256b5e8435af151" prot="public" virt="non-virtual"><scope>slamISAM</scope><name>print_cones</name></member>
      <member refid="classslamISAM_1a557bf4cb56eae4be97a60f5ce65c365a" prot="public" virt="non-virtual"><scope>slamISAM</scope><name>robot_est</name></member>
      <member refid="classslamISAM_1ad2830c6d162c4387d2296e47acdbc7eb" prot="public" virt="non-virtual"><scope>slamISAM</scope><name>slamISAM</name></member>
      <member refid="classslamISAM_1a00e82e306602f32451124afb29364365" prot="public" virt="non-virtual"><scope>slamISAM</scope><name>step</name></member>
      <member refid="classslamISAM_1ab07c8f29237621e0b929d4a7098bfd4f" prot="public" virt="non-virtual"><scope>slamISAM</scope><name>t_associate</name></member>
      <member refid="classslamISAM_1a8c3fd1e88200d8230bfc48b28404ccc1" prot="private" virt="non-virtual"><scope>slamISAM</scope><name>values</name></member>
      <member refid="classslamISAM_1aec2ba37dcd63ad9e413e4c0f6d781065" prot="private" virt="non-virtual"><scope>slamISAM</scope><name>X</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
